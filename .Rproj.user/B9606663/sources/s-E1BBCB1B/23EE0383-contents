library(maptools)
library(sp) 
library(shapefiles)
library(fields)
library(RColorBrewer)
library(Hmisc)
library(devtools)
library(raster)
library(rgeos)
library(rgdal)
library(data.table)

setwd("//fi--didenas1.dide.local/yf/Arran/PhD")

#Load functions and data - sourcing data takes a while
# load_all("Code/pop_vac_revamp")
invisible(sapply(list.files("Code/pop_vac_revamp/R", ".R", full.names = TRUE), function(x) source(x)))
source("vaccination_coverage_latin_america/R/data_source.R")

#Set up function
popdf<-pop_csv
shp2<-shp2_v2.8
switch<-"base"
skew<-0

time1<-Sys.time()
vaccination_coverage<-vacc_launcher(epi, pop_csv, countryiso, shp2_v2.8, schedule, 
                                    adm_setting = "adm1", savemodifier = "brazil_updated_information", switch = "base", skew = 0)
time2<-Sys.time()








# rowSums(BOL_adm1[[1]][, 2016-1949, ]*BOL_adm1[[2]][, 2016-1949, ])/rowSums(BOL_adm1[[2]][, 2016-1949, ])
# rowSums(BOL_adm2[[1]][, 2016-1949, ]*BOL_adm2[[2]][, 2016-1949, ])/rowSums(BOL_adm2[[2]][, 2016-1949, ])





test_ISO<-countryiso

values_all<-sapply(1:4, function(x){

  savename<-if(x == 1) "skew_neg1_all_south_america" else if(x == 2) "skew0_all_south_america" else if(x == 3) "skew1_all_south_america" else "no_all_all_south_america"

  mod_sched<-schedule
  skew_val_all<-if(x == 1) -1 else if(x == 2) 0 else if(x == 3) 1 else 4
  mod_sched[which(mod_sched$adm1 == "all"), "skew"]<-skew_val_all
  if(x == 4) mod_sched<-mod_sched[-which(mod_sched$skew == 4), ]

  vaccination_coverage<-vacc_launcher(epi, pop_csv, test_ISO, shp2_v2.8, mod_sched, adm_setting = "adm1", savemodifier = savename, switch = "base", skew = 0)
  vaccination_coverage

}, simplify = FALSE)





png("vaccination_coverage_latin_america/figs/different_all_applications_all.png", units = 'in', res = 300, height = 6, width = 6)
par(mfrow = c(2, 2), mar = c(0, 0, 1, 0), oma = c(1, 0, 1, 6))
mybreaks<- seq(0, 1, length.out = 21)
mycols<- c("gray80", colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2))#c("white", (colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2)))
sapply(1:4, function(x){

  new_vac<-values_all[[x]][[1]]
  new_pop<-values_all[[x]][[2]]
  
  allvacced<-new_vac[, 2018-1950 , ]*new_pop[, 2018-1950, ]
  usethese<-rowSums(allvacced)/rowSums(new_pop[, 2018-1950, ])
  
  # mybreaks<- seq(0, 1.01, length.out = 101)
  # mycols<- c("gray80", colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2))#c("white", (colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2)))
  vcols<- findInterval(usethese, mybreaks)
  plot(shp1_v2.8[shp1_v2.8$SPID %in% row.names(new_vac), ], col=mycols[vcols], border = NA)
  plot(shp0, add = TRUE)
  mtext(side = 3, text = LETTERS[x], cex = 2, adj = 0)
  
})
par(mgp=c(2,1,0),fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
image.plot(legend.only=T, ticks=mybreaks, breaks=mybreaks, col=mycols,legend.width = 1.2, legend.shrink = 0.5, cex.lab = 1.5)
dev.off()


prog_cols<-rev(c(colorRampPalette(brewer.pal(4,"YlOrRd"))(4)))
values_diff<-sapply(1:4, function(x){
  new_vac<-values_all[[x]][[1]]
  new_pop<-values_all[[x]][[2]]
  allvacced<-new_vac[, 2018-1950 , ]*new_pop[, 2018-1950, ]
  usethese<-rowSums(allvacced)/rowSums(new_pop[, 2018-1950, ])
  usethese
}, simplify = FALSE)


png("vaccination_coverage_latin_america/figs/differences_between_applications_all.png", units = 'in', res = 500, height = 4, width = 10)
par(mfrow = c(1, 2), mar = c(1, 1, 1, 1), oma = c(3, 1, 1, 2))
sapply(1:4, function(x){
  usethese<-values_diff[[x]]
  usethese<-usethese[which(usethese>0)]
  if(x == 1){
    names<-gsub('[0-9]+', '', names(usethese))
    plot(usethese, bty = "l", ylim = c(0, 1), bg = scales::alpha(prog_cols[x], .75), pch = 21, ylab = "Proportion vaccinated", xlab = "", xaxt = "n", cex.axis = .6)
    # axis(side = 1, at = 1:length(usethese), labels = names(usethese), las = 2, cex.axis = .2)
    axis(side = 1, at = match(unique(names), names), labels = unique(names), las = 2, cex.axis = .5)
    wherevals<-match(unique(shp1_v2.8[shp1_v2.8$SPID %in% names(which(values_diff[[1]] != 0)), ]$ISO), shp1_v2.8[shp1_v2.8$SPID %in% names(which(values_diff[[1]] != 0)), ]$ISO)
    abline(v = match(unique(names), names), lty = 2)
    } else points(usethese, bty = "l", ylim = c(0, 1), bg = scales::alpha(prog_cols[x], .75), pch = 21)
})
mtext(side = 3, adj = 0, text = "A")
diff_vals<-values_diff[[1]]-values_diff[[4]]

mybreaks<- seq(0, 1, length.out = 21)
mycols<- c("gray80", colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2))#c("white", (colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2)))
vcols<- findInterval(diff_vals, mybreaks)
plot(shp1_v2.8[shp1_v2.8$SPID %in% row.names(values_all[[1]][[1]]), ], col=mycols[vcols], border = NA)
plot(shp0, add = TRUE, border = "black")
# text(shp1_v2.8[shp1_v2.8$SPID %in% names(which(values_diff[[1]] != 0)), ], 
     # labels = shp1_v2.8[shp1_v2.8$SPID %in% names(which(values_diff[[1]] != 0)), ]$SPID, cex = 0.2)
image.plot(legend.only=T, ticks=mybreaks, breaks=mybreaks, col=mycols,legend.width = 1.8, legend.shrink = .9, cex.lab = 2)
mtext(side = 3, outer = TRUE, text = "All vaccination coverage 2018")
mtext(side = 3, adj = 0, text = "B")

par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0), new=TRUE)
plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')

legend("bottom", legend = c("Unvaccinated\ntargeting", "Equal\ntargeting", "Preferential\nvaccinated targeting", "No all campaigns"), 
       pt.bg = prog_cols, pch = 21, horiz = TRUE, cex = .8, bty = "n")
dev.off()



##Country levels
# sapply(1:4, function(x){
#   
#   
#   new_vac<-values_all[[x]][[1]]
#   new_pop<-values_all[[x]][[2]]
#   
#   allvacced<-new_vac[, 2018-1950 , ]*new_pop[, 2018-1950, ]
#   names_all<-gsub('[0-9]+', "", row.names(allvacced))
#   
#   vac_pop_all<-data.frame(names_all, allvacced)
#   pop_all<-data.frame(names_all, new_pop[, 2018-1950, ])
#   
#   ISO_popvac<-aggregate(vac_pop_all[, 2:ncol(vac_pop_all)], by = list(vac_pop_all$names_all), FUN = sum)
#   ISO_pop<-aggregate(pop_all[, 2:ncol(pop_all)], by = list(pop_all$names_all), FUN = sum)
#   
#   total_popvac<-rowSums(ISO_popvac[, 2:ncol(ISO_popvac)])/rowSums(ISO_pop[, 2:ncol(ISO_pop)])
#   mycols<- colorRampPalette(brewer.pal(length(unique(names_all)), "Paired"))(length(mybreaks)-1)#c("white", (colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2)))
#   
#   plot(total_popvac, ylim = c(0, 1), bty = "l", pch = 21, bg = mycols, xaxt = "n", xlab = "", cex = 1.5)
#   axis(side = 1, at = 1:length(total_popvac), labels = unique(names_all))
#   abline(0.8, 0, las = 2)
#   
# })










vac_prop_time<-sapply(2000:2017, function(t){
  adm_all_vacced<-data.frame("SPID" = paste0(first$shp2_sub$ISO, first$shp2_sub$ID_1), "pop_vac" = rowSums(third[, t-1950 , ]*first$pop1_adm2[, t-1950, ]), stringsAsFactors = FALSE)
  adm1_vacced<-aggregate(adm_all_vacced$pop_vac, by = list(adm_all_vacced$SPID), FUN = sum)
  
  adm_all<-data.frame("SPID" = paste0(first$shp2_sub$ISO, first$shp2_sub$ID_1), "pop_vac" = rowSums(first$pop1_adm2[, t-1950, ]), stringsAsFactors = FALSE)
  adm1_all<-aggregate(adm_all$pop_vac, by = list(adm_all$SPID), FUN = sum)
  
  vacc_adm1_prop<-round(adm1_vacced$x/adm1_all$x, 4)
  
  df<-data.frame("SPID" = adm1_all$Group.1, "vac_prop" = vacc_adm1_prop)
  names(df)<-c("SPID", paste0("vac_prop_", t))
  df
}, simplify = FALSE)

vac_prop_df<-vac_prop_time[[1]]
for(i in 2:length(vac_prop_time)){
  vac_prop_df<-cbind(vac_prop_df, vac_prop_time[[i]][, 2])
}

names(vac_prop_df)<-c("SPID", paste0("X", 2000:2017))

plot(as.numeric(vac_prop_df[1, 2:length(vac_prop_df)]), bty = "l", ylim = c(0, 1), xlim = c(0, 17), type = "l")
sapply(2:nrow(vac_prop_df), function(y){
  lines(as.numeric(vac_prop_df[y, 2:length(vac_prop_df)]), type = "l")
})


tester_df<-data.frame(shp1_v2.8[shp1_v2.8$ISO %in% shp2_v2.8$ISO, c("ISO", "ID_1", "SPID")])
tester_df<-tester_df[!duplicated(tester_df$SPID), ]
tester_df<-cbind(tester_df, matrix(rep(0, 432), ncol = length(2000:2017)))
tester_df[which(tester_df$SPID %in% vac_prop_df$SPID), 4:ncol(tester_df)]<-vac_prop_df[, 2:ncol(vac_prop_df)]
colnames(tester_df)[4:length(tester_df)]<-paste0("X", 2000:2017)


# write.csv(tester_df, "//fi--didenas1.dide.local/yf/Arran/PhD/annual_regression/data/South_America_vacc_coverage_130318.csv", row.names = FALSE)

va_valz<-third

year<-2016

par(mfrow = c(2, 4), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0))
sapply(c(1950, 1980, 1990, 1995, 2000, 2005, 2015, 2015), function(year){

popvaclevel<-rowSums((first$pop1_adm2[, year-1949, ]*va_valz[, year-1949, ]))/rowSums(first$pop1_adm2[, year-1949, ])
sum((first$pop1_adm2[, year-1949, ]*va_valz[, year-1949, ]))/sum(first$pop1_adm2[, year-1949, ])

shp1<-shp1_v2.8[shp1_v2.8$ISO %in% first$shp2_sub$ISO, ]
shp2<-shp2_v2.8[shp2_v2.8$ISO %in% first$shp2_sub$ISO, ]

# shp1<-shp1[order(shp1$SPID), ]

mybreaks<- seq(0, 1.00, length.out = 11)
mycols<- c("white", (colorRampPalette(brewer.pal(9,"YlGn"))(length(mybreaks)-2)))
vcols<- findInterval(popvaclevel, mybreaks)

plot(shp1[shp1$SPID == "BRA13", ])
plot(shp2, col=mycols[vcols], border = NA, add = TRUE)#, add = TRUE)
# plot(shp0, add = TRUE)
plot(shp1, add = TRUE)
image.plot(legend.only=T, ticks=mybreaks, breaks=mybreaks, col=mycols,legend.width = 1.2, legend.shrink = 0.5, cex.lab = 2)

})


range(popvaclevel[grepl(paste0(shp2[shp2$NAME_1 == "Pernambuco", ]$SPID, collapse = "|"), names(popvaclevel))])





#Compare with shearer
vacc_coverage<-load_obj("//fi--didenas1.dide.local/yf/Arran/PhD/vaccination_coverage_latin_america/output/vacc_coverage_and_population_skew0_all_south_america_adm1.Rdata")
vacc_coverage_newall<-load_obj("//fi--didenas1.dide.local/yf/Arran/PhD/vaccination_coverage_latin_america/output/vacc_coverage_and_population_testing_with_new_all_adm1.Rdata")

shp1<-shp1_v2.8
shp1<-shp1[shp1$SPID %in% row.names(vacc_coverage$vaccination_coverage_skew0_all_south_america),]

# 
# png("vaccination_coverage_latin_america/figs/lancID_comparison.png", units = 'in', res = 500, height = 10, width = 5)
# par(mfrow = c(3, 2), mar = c(0, 0, 0, 2), oma = c(0, 1, 2, 4))
# mybreaks<- seq(0, 101, by = 1)
# mycols<-c(colorRampPalette(brewer.pal(9, "YlGn"))(length(mybreaks)-1))
# sapply(c(1970, 1980, 1990, 2000, 2010, 2016), function(x){
#   new_vac<-vacc_coverage$vaccination_coverage_skew0_all_south_america
#   new_pop<-vacc_coverage$population_skew0_all_south_america
#   allvacced<-new_vac[, x-1950 , ]*new_pop[, x-1950, ]
#   usethese<-rowSums(allvacced)/rowSums(new_pop[, x-1950, ])
#   usethese<-usethese*100
#   # mycols<- c(colorRampPalette(brewer.pal(9, "YlGnBu"))(length(0:79)), colorRampPalette(brewer.pal(9, "Purples"))(length(80:101)))
#   vcols<- findInterval(usethese, mybreaks)
#   plot(shp1, col=mycols[vcols], border = NA)
#   plot(shp0, add = TRUE)
#   mtext(side = 3, adj = 0, text = x)
# })
# par(mgp=c(2,1,0),fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
# plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
# image.plot(legend.only=T, ticks=mybreaks, breaks=mybreaks, col=mycols,legend.width = 1.2, legend.shrink = 0.5, cex.lab = 2)
# dev.off()



png("vaccination_coverage_latin_america/figs/new_old_all_update.png", units = 'in', res = 500, height = 10, width = 5)
par(mfrow = c(1, 2), mar = c(0, 0, 0, 2), oma = c(0, 1, 2, 4))
mybreaks<- seq(0, 101, by = 1)
mycols<-c(colorRampPalette(brewer.pal(9, "YlGn"))(length(mybreaks)-1))
# mycols<-c(colorRampPalette(brewer.pal(9, "YlGn"))(79), colorRampPalette(brewer.pal(9, "Purples"))(21))
vac_vals<-sapply(1:2, function(x){
  new_vac<-if(x == 1) vacc_coverage$vaccination_coverage_skew0_all_south_america else vacc_coverage_newall$vaccination_coverage_testing_with_new_all
  new_pop<-if(x == 1) vacc_coverage$population_skew0_all_south_america else vacc_coverage_newall$population_testing_with_new_all

  allvacced<-new_vac[, 2018-1950 , ]*new_pop[, 2018-1950, ]
  usethese<-rowSums(allvacced)/rowSums(new_pop[, 2018-1950, ])
  usethese<-usethese*100
  # mycols<- c(colorRampPalette(brewer.pal(9, "YlGnBu"))(length(0:79)), colorRampPalette(brewer.pal(9, "Purples"))(length(80:101)))
  vcols<- findInterval(usethese, mybreaks)
  plot(shp1, col=mycols[vcols], border = NA)
  plot(shp0, add = TRUE)
  mtext(side = 3, adj = 0, text = x)
  usethese
})

par(mgp=c(2,1,0),fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
image.plot(legend.only=T, ticks=mybreaks, breaks=mybreaks, col=mycols,legend.width = 1.2, legend.shrink = 0.5, cex.lab = 2)
dev.off()














